{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "2374133471877250742"
    }
  },
  "parameters": {
    "AppName": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "BackupSchedule": {
      "type": "string",
      "defaultValue": "0 0 3 * * *"
    },
    "StorageAccountNameSource": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account where the source storage account is located"
      }
    },
    "StorageAccountNameTarget": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account where the target storage account is located"
      }
    },
    "RGNameSource": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group where the source storage account is located"
      }
    },
    "RGNameTarget": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group where the target storage account is located"
      }
    },
    "FunctionPlan": {
      "type": "string",
      "allowedValues": [
        "Consumption",
        "Premium"
      ],
      "metadata": {
        "description": "Choose your function plan. If you want to backup via private endpoint, please choose Premium. Else you should choose Consumption"
      }
    }
  },
  "variables": {
    "$fxv#0": "<#\n.SYNOPSIS\n  Backup Azure Table Storage via Azure Functions App\n.DESCRIPTION\n  This script will backup all tables and partitions from a given Azure Table Storage Account to another Azure Table Storage Account as JSON files.\n.PARAMETER None\n    No parameters are required\n.NOTES\n  Version:        1.0\n  Author:         Bernhard Fluer\n  Creation Date:  17.03.2023\n  Purpose/Change: Initial script development\n#>\n#Requires -Version 5.0\n#Requires -Modules AzTable, Az.Storage\n\nparam($Timer)\n\n# Only run the backup when the timer trigger fires\nif ($Timer) {\n    # Parameters \n    $StorageAccountNameSource = $env:StorageAccountNameSource\n    $StorageAccountNameTarget = $env:StorageAccountNameTarget\n    $RGNameSource = $env:RGNameSource\n    $RGNameTarget = $env:RGNameTarget\n\n    # Welcome Message + Info about Params\n    Write-Host \"Welcome to the Table Storage Backup Script!\"\n    Write-Host \"Your data will be grabbed from $StorageAccountNameSource and backup to $StorageAccountNameTarget\"\n\n    # Import the Azure Storage Module\n    Import-Module Az.Storage\n    Import-Module AzTable\n\n    # Get the Storage Account Context\n    try {\n        #Check if Storage Accounts are available; stop if not\n        Get-AzStorageAccount -Name $StorageAccountNameTarget -ResourceGroupName $RGNameTarget -ErrorAction Stop | Out-Null\n        Get-AzStorageAccount -Name $StorageAccountNameSource -ResourceGroupName $RGNameSource -ErrorAction Stop | Out-Null\n\n        #Get Context\n        Write-Debug \"Get Context of Storage Accounts...\"\n        $StorageAccountContext = (Get-AzStorageAccount -Name $StorageAccountNameSource -ResourceGroupName $RGNameSource -ErrorAction Stop).Context\n        $FileShareSAContext = (Get-AzStorageAccount -Name $StorageAccountNameTarget -ResourceGroupName $RGNameTarget).Context\n\n        #Iterate through all the tables in the storage account -> Folder level in File Share\n        $Tables = Get-AzStorageTable -Context $StorageAccountContext\n    } catch {\n        Write-Error -Message \"Failed to get storage accounts. Check if storage account names and permissions are correct: $_\"\n        exit 1\n    }\n\n    #Check if File Share exists\n    $TableFileShare = Get-AzStorageShare -Name \"backup$StorageAccountNameSource\" -Context $FileShareSAContext -ErrorAction SilentlyContinue\n        \n    if (!$TableFileShare) {\n        Write-Debug \"Creating Backup-FileShare...\"\n        #Create File Share\n        New-AzRmStorageShare -ResourceGroupName $RGNameTarget -StorageAccountName $StorageAccountNameTarget -Name \"backup$StorageAccountNameSource\" -AccessTier Cool\n    } else {\n        Write-Debug \"Backup-FileShare already exists! Continue...\"\n    }\n\n    foreach ($Table in $Tables)\n    {\n        $TableName = $Table.Name    \n\n        # Create Folder for Table if not exists\n        Write-Debug \"Check if folder $TableName exists...\"\n\n        $targetFolder = Get-Item -Path $env:TEMP/$TableName -ErrorAction SilentlyContinue\n        if(!$targetFolder) {\n            Write-Debug \"Creating folder $TableName ...\"\n            $targetFolder = New-Item -Name $TableName -ItemType Directory -Path $env:TEMP\n        } else {\n            Write-Debug \"Folder $TableName exists! Continue ...\"\n        }\n        #Iterate through all the partitions in the table -> File level in File Share\n        Write-Debug \"Getting PartitionKeys of Table $TableName\"\n        $CloudTable = (Get-AzStorageTable -Context $StorageAccountContext -Name $TableName).CloudTable\n        $Partitions = (Get-AzTableRow -Table $CloudTable -SelectColumn \"PartitionKey\").PartitionKey | Select-Object -Unique\n        \n        Write-Debug \"Write to JSON Files\"\n        foreach ($Partition in $Partitions)\n        {\n            #Get the data for the partition\n            $PartitionData = Get-AzTableRow -Table $CloudTable -PartitionKey $Partition -ErrorAction SilentlyContinue\n            #Convert the data to JSON and write to a file in temp folder\n            $PartitionData | ConvertTo-Json | Out-File -FilePath \"$env:TEMP\\$TableName\\$($Partition).json\"\n        }\n    }\n\n    Write-Debug \"Starting upload to backup account\"\n    foreach ($table in $Tables) {\n        $tableName = $table.Name\n        # Create Folder for Table on File Share if not exists\n        $folder = Get-AzStorageFile -ShareName \"backup$StorageAccountNameSource\" -Context $FileShareSAContext -ErrorAction SilentlyContinue | Where-Object {$_.Name -eq $tableName.ToLower()}\n        if (!$folder) {\n            New-AzStorageDirectory -ShareName \"backup$StorageAccountNameSource\" -Context $FileShareSAContext -Path $tableName.ToLower()\n        } else {\n            Write-Debug \"Folder $tableName exists on File Share! Continue ...\"\n        }\n    }\n    \n    # Remove old folders\n    $share = Get-AzStorageFile -ShareName \"backup$StorageAccountNameSource\" -Context $FileShareSAContext | Where-Object {$_.Type -eq \"Directory\"}\n    foreach ($dir in $share) {\n        if ($Tables -contains $dir.Name) {\n            continue\n        } else {\n            Write-Debug \"Remove old folder $dir.Name\"\n        }\n        $dir | Remove-AzStorageFile -Force\n    }\n\n    foreach ($table in $Tables) {\n        $tableName = $table.Name\n        # Upload to file share\n        $CurrentFolder = (Get-Item $env:TEMP/$tableName).FullName\n        $Container = Get-AzStorageShare -Name \"backup$StorageAccountNameSource\" -Context $FileShareSAContext\n        Get-ChildItem -Path $env:TEMP/$tableName -Recurse | Where-Object { $_.GetType().Name -eq \"FileInfo\"} | ForEach-Object {\n            $path=\"$tableName/$($_.FullName.Substring($CurrentFolder.Length+1).Replace(\"\\\",\"/\"))\"\n            Write-Output \"Upload Partition $($_.FullName) from table $tableName\"\n            Set-AzStorageFileContent -Sharename $Container.Name -Context $FileShareSAContext -Source $_.FullName -Path $path -Force\n        }\n    }\n    Write-Output -Message \"Completed!\"\n}",
    "$fxv#1": "# This file enables modules to be automatically managed by the Functions service.\n# See https://aka.ms/functionsmanageddependency for additional information.\n#\n@{\n    # For latest supported version, go to 'https://www.powershellgallery.com/packages/Az'.\n    # To use the Az module in your function app, please uncomment the line below.\n    'Az' = '9.*'\n    'AzTable' = '2.*'\n}",
    "$fxv#2": "{\n  \"version\": \"2.0\",\n  \"logging\": {\n    \"applicationInsights\": {\n      \"samplingSettings\": {\n        \"isEnabled\": true,\n        \"excludedTypes\": \"Request\"\n      }\n    }\n  },\n  \"extensionBundle\": {\n    \"id\": \"Microsoft.Azure.Functions.ExtensionBundle\",\n    \"version\": \"[3.*, 4.0.0)\"\n  },\n  \"managedDependency\": {\n    \"enabled\": true\n  }\n}",
    "storageAccountName": "[format('{0}azfunctions', uniqueString(resourceGroup().id))]",
    "storageAccountType": "Standard_LRS",
    "FunctionAppName": "[parameters('AppName')]",
    "HostPlanName": "[format('{0}-plan', parameters('AppName'))]",
    "appInsightsName": "[format('{0}-Insights', parameters('AppName'))]",
    "v_sku": "[if(equals(parameters('FunctionPlan'), 'Consumption'), createObject('name', 'Y1', 'tier', 'Dynamic'), createObject('name', 'EP1', 'tier', 'Dynamic'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-12-01",
      "name": "[variables('HostPlanName')]",
      "location": "[parameters('location')]",
      "sku": "[variables('v_sku')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-12-01",
      "name": "[variables('FunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('HostPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower('name')]"
            },
            {
              "name": "StorageAccountNameSource",
              "value": "[parameters('StorageAccountNameSource')]"
            },
            {
              "name": "StorageAccountNameTarget",
              "value": "[parameters('StorageAccountNameTarget')]"
            },
            {
              "name": "RGNameSource",
              "value": "[parameters('RGNameSource')]"
            },
            {
              "name": "RGNameTarget",
              "value": "[parameters('RGNameTarget')]"
            },
            {
              "name": "BackupSchedule",
              "value": "[parameters('BackupSchedule')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            }
          ],
          "ftpsState": "FtpsOnly",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('HostPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('FunctionAppName'), 'BackupTable')]",
      "properties": {
        "language": "PowerShell",
        "config": {
          "bindings": [
            {
              "name": "Timer",
              "type": "timerTrigger",
              "direction": "in",
              "schedule": "%BackupSchedule%"
            }
          ],
          "disabled": false
        },
        "files": {
          "run.ps1": "[variables('$fxv#0')]",
          "../requirements.psd1": "[variables('$fxv#1')]",
          "../host.json": "[variables('$fxv#2')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('FunctionAppName'))]"
      ]
    }
  ]
}